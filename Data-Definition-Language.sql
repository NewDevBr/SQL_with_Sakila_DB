-- CREATED BY LUIZ GABRIEL | https://github.com/NewDevBr
-- IT'S NOT A COMPLETE DATABASE, JUST EXEMPLIFY DDL USES. DON'T USE THIS CODE IN PRODUCTION ENVIROMENT.
-- MYSQL SERVER IN COMMUNITY VERSION: 8.0.23
-- CREATING AND USING DATABASE RESTAURANT
DROP DATABASE IF EXISTS RESTAURANT;

CREATE DATABASE IF NOT EXISTS RESTAURANT;

USE RESTAURANT;

-- DEFINING TABLES
CREATE TABLE IF NOT EXISTS CONTACT (
    CONTACT_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PHONE VARCHAR(14),
    EMAIL VARCHAR(45) NOT NULL,
    LANDLINE VARCHAR(14),
    PROFESSIONAL_LINK VARCHAR(500)
);

CREATE TABLE IF NOT EXISTS MANUFACTURER (
    MANUFACTURER_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(45) NOT NULL,
    CONTACT_ID BIGINT
);

CREATE TABLE IF NOT EXISTS PRODUCT (
    PRODUCT_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    MANUFACTURER_ID BIGINT NOT NULL,
    NAME VARCHAR(45) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    CREATED_AT DATETIME DEFAULT NOW() NOT NULL,
    UPDATED_AT DATETIME DEFAULT NOW() NOT NULL
);

CREATE TABLE IF NOT EXISTS HISTORICAL_PRODUCT_PRICE (
    HISTORICAL_PRODUCT_PRICE_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PRODUCT_ID BIGINT NOT NULL,
    PRICE DECIMAL(10, 2) NOT NULL,
    PRICE_AT DATETIME DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS CUSTOMER (
    CUSTOMER_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    CONTACT_ID BIGINT NOT NULL,
    ADDRESS_ID BIGINT NOT NULL,
    FIRST_NAME VARCHAR(45) NOT NULL,
    LAST_NAME VARCHAR(45) NOT NULL,
    DOCUMENT_ID VARCHAR(18) NOT NULL,
    EMAIL VARCHAR(45) NOT NULL,
    P_A__SSW0_RD TEXT,
    CREATED_AT DATETIME DEFAULT NOW(),
    LAST_UPDATE DATETIME DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS COUNTRY (
    COUNTRY_ID BIGINT NOT NULL PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS STATE (
    STATE_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    INITIALS VARCHAR(2) NOT NULL,
    COUNTRY_ID BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS CITY (
    CITY_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(50),
    STATE_ID BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS ADDRESS (
    ADDRESS_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    STREET VARCHAR(500) NOT NULL,
    BOROUGH VARCHAR(100) NOT NULL,
    VISUAL_REFERENCE VARCHAR(50),
    CITY_ID BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS COOPERATOR (
    COOPERATOR_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    CONTACT_ID BIGINT NOT NULL,
    ADDRESS_ID BIGINT NOT NULL,
    FULL_NAME VARCHAR(50) NOT NULL,
    DOCUMENT_ID VARCHAR(18),
    P_A__SSW0_RD TEXT
);

CREATE TABLE IF NOT EXISTS ORDER_STATUS (
    STATUS_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    DESCRIPTION VARCHAR(45)
);

CREATE TABLE IF NOT EXISTS ORDERS (
    ORDER_STATUS_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    CUSTOMER_ID BIGINT NOT NULL,
    ADDRESS_ID BIGINT NOT NULL,
    COOPERATOR_ID BIGINT,
    STATUS_ID INT,
    CREATED_AT DATETIME DEFAULT NOW() NOT NULL
);

CREATE TABLE IF NOT EXISTS PRODUCT_ORDER (
    ORDER_ID BIGINT NOT NULL,
    PRODUCT_ID BIGINT NOT NULL
);

-- DEFINING SOME CONSTRAINTS RULES AND RELATIONSHIPS
ALTER TABLE MANUFACTURER
ADD CONSTRAINT FOREIGN KEY MANUFACTURER (CONTACT_ID) REFERENCES CONTACT (CONTACT_ID);

ALTER TABLE PRODUCT
ADD CONSTRAINT FOREIGN KEY PRODUCT (MANUFACTURE_ID) REFERENCES MANUFACTURE (MANUFACTURE_ID);

ALTER TABLE HISTORICAL_PRODUCT_PRICE
ADD CONSTRAINT FOREIGN KEY HISTORICAL_PRODUCT_PRICE (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID);

ALTER TABLE CUSTOMER
ADD CONSTRAINT FOREIGN KEY CUSTOMER (CONTACT_ID) REFERENCES CONTACT (CONTACT_ID);

ALTER TABLE PRODUCT_ORDER
ADD CONSTRAINT FOREIGN KEY PRODUCT_ORDER (PRODUCT_ID) REFERENCES PRODUCT (PRODUCT_ID);

ALTER TABLE PRODUCT_ORDER
ADD CONSTRAINT FOREIGN KEY PRODUCT_ORDER (ORDER_ID) REFERENCES PRODUCT (ORDER_ID);

-- CREATING STORED PROCEDURES

DELIMITER $$
CREATE PROCEDURE SAVE_PRODUCT(
    PRODUCT_ID INT,
    MANUFACTURER_ID INT,
    NAME VARCHAR(45),
    DESCRIPTION TEXT,
    PRICE DECIMAL(10, 2)
)
BEGIN
    -- STATEMENTS IN THIS STORED PROCEDURE ARE NOT DDL, BUT DML
    IF (PRODUCT_ID = -1) THEN
        INSERT
            INTO PRODUCT (MANUFACTURER_ID, NAME, DESCRIPTION)
            VALUES (PRODUCT_ID, MANUFACTURER_ID, NAME, DESCRIPTIOM)
        ;

        INSERT
            INTO HISTORICAL_PRODUCT_PRICES (PRODUCT_ID, PRICE)
            VALUES (LAST_INSERT_ID(), PRICE)
        ;
    ELSE
        UPDATE PRODUCT
            SET MANUFACTURER_ID = MANUFACTURER_ID,
                NAME = NAME,
                DESCRIPTION = DESCRIPTION
            WHERE PRODUCT_ID = PRODUCT_ID
            LIMIT 1
        ;

        INSERT
            INTO HISTORICAL_PRODUCT_PRICES (PRODUCT_ID, PRICE)
            VALUES (PRODUCT_ID, PRICE)
        ;
    END IF;

END $$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE SAVE_CUSTOMER(
    
    -- CUSTOMER PARAMS
    CUSTOMER_ID BIGINT,
    FIRST_NAME VARCHAR(45),
    LAST_NAME VARCHAR(45),
    DOCUMENT_ID VARCHAR(45),
    EMAIL VARCHAR(45),
    PASSWORD VARCHAR(45),

    -- CONTACT PARAMS
    PHONE VARCHAR(14),
    SECONDARY_EMAIL VARCHAR(45),
    LANDLINE VARCHAR(45),

    -- ADDRESS PARAMS
    STREET VARCHAR(500),
    BOROUGH VARCHAR(100),
    VISUAL_REFERENCE VARCHAR(50),
    CITY_ID BIGINT
)
BEGIN
    -- STATEMENTS IN THIS STORED PROCEDURE ARE NOT DDL, BUT DML
    IF (CUSTOMER_ID = -1) THEN
        INSERT
            INTO ADDRESS (STREET, BOROUGH, VISUAL_REFERENCE, CITY_ID)
            VALUES (STREET, BOROUGH, VISUAL_REFERENCE, CITY_ID)
        ;

        SET @ADDRESS_ID = LAST_INSERT_ID();

        INSERT
            INTO CONTACT (PHONE, EMAIL, LANDLINE)
            VALUES (PHONE, EMAIL, LANDLINE)
        ;

        SET @CONTACT_ID = LAST_INSERT_ID();

        SET @HASHED_PASSWORD = MD5(PASSWORD);

        INSERT
            INTO CUSTOMER (CONTACT_ID, ADDRESS_ID, FIRST_NAME, LAST_NAME, DOCUMENT_ID, EMAIL, P_A__SSW0_RD)
            VALUES (@CONTACT_ID, @ADDRESS_ID, FIRST_NAME, LAST_NAME, DOCUMENT_ID, EMAIL, @HASHED_PASSWORD)
        ;

    ELSE

        UPDATE PRODUCT
            SET
                MANUFACTURER_ID = MANUFACTURER_ID,
                NAME = NAME,
                DESCRIPTION = DESCRIPTION
            WHERE PRODUCT_ID = PRODUCT_ID
            LIMIT 1
        ;

        INSERT
            INTO HISTORICAL_PRODUCT_PRICES (PRODUCT_ID, PRICE)
            VALUES(PRODUCT_ID, PRICE)
        ;
    
    END IF;
END $$ DELIMITER;